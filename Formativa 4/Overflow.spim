.data	
	overflow: .asciiz "overflow"
.text
main:
	li $v0, 5	#lendo se é com sinal ou não
	syscall 
	beq $v0, $zero, semSinal          #$v0 = 0? se ss entao --> semSinal
	j comSinal

comSinal: 
	li $v0, 5   #le o primeiro inteiro
	syscall
	move $s1, $v0

	li $v0, 5   
	syscall
	move $s2, $v0

	xor $s3,$s1,$s2	       #mesmo sinal?
	slt $s3,$s3,$zero	    #s3 = s3 < 0
	bne $s3, $zero, semOverflow

	addu $s0, $s1, $s2  #adicao sem overflow s0=s1+s2
	xor $s3, $s0, $s1      
	slt $s3, $s3, $zero
	bne $s3, $zero, comOverflow     # s3=!zero da overflow 

	j semOverflow

semSinal:
	
	li $v0, 5	
	syscall 
	move $s1, $v0
	
	li $v0, 5	
	syscall
	move $s2, $v0
	
	nor $s3, $s1, $zero      # s3 = oposto de s1 --> -s1 em binario 
	sltu $s3, $s3, $s2         #s3 = $s1 < $s2
	bne $s3, $zero, comOverflow    # s3=!zero da overflow 

	j semOverflow 	

semOverflow:
	addu $s0, $s1, $s2      #adicao sem overflow s0=s1+s2
	move $a0,$s0            
	li $v0, 1          #imprime a soma 
	syscall	

	li $v0, 10
	syscall

comOverflow:
	li $v0, 4
	la $a0, overflow
	syscall 
	
	li $v0, 10
	syscall











